#!/usr/bin/env bash

function indent_xml_stream_as_copy(){
	FILE=$(readlink -f "${1}")
	
	if [[ ! -e "${FILE}" ]]; then
		zenity --no-wrap --error --text="Cannot find ${FILE}"
		return
	fi
	
	if [[ ! -f "${FILE}" ]]; then
		zenity --no-wrap --error --text="'$(basename "${BASH_SOURCE}")' works on files only"
		return
	fi
	
	FILE_TO_INDENT="${FILE}.$(date '+%y%m%d-%H%M%S').indented.xml"
	
	# Assume the file is the capture of an XML stream, we will work on a copy of FILE and add a root element into it
	ROOT_ELEMENT_NAME="root_element_added_for_indentation"
	echo  "<${ROOT_ELEMENT_NAME}>" >"${FILE_TO_INDENT}"
	cat "${FILE}" >>"${FILE_TO_INDENT}"
	echo "</${ROOT_ELEMENT_NAME}>" >>"${FILE_TO_INDENT}"
	
	# `xmlstarlet` was used before but we could find some XML documents that it could handle properly while `tidy` could.
	#xmlstarlet fo "${FILE_TO_INDENT}" >"${FILE_TO_INDENT}.tmp" 2>"${FILE_TO_INDENT}.log"
	tidy -xml -i -q "${FILE_TO_INDENT}" >"${FILE_TO_INDENT}.tmp" 2>"${FILE_TO_INDENT}.log"
	RETURN_CODE=$?
	
	if [[ "${RETURN_CODE}" -eq 0 ]]; then
		mv "${FILE_TO_INDENT}.tmp" "${FILE_TO_INDENT}"
		if [[ -e "${FILE_TO_INDENT}.log" ]]; then
			rm -f "${FILE_TO_INDENT}.log"
		fi
	else
		zenity --no-wrap --error --text="An error occurred while indenting ${FILE}"
		if [[ -e "${FILE_TO_INDENT}.tmp" ]]; then
			rm -f "${FILE_TO_INDENT}.tmp"
		fi
	fi
}

coproc ( for FILE in "${@}"; do indent_xml_stream_as_copy "${FILE}"; done )
