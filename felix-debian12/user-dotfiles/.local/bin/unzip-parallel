#!/usr/bin/env bash

function print_error(){
	if [[ $# -lt 1 ]]; then return; fi
	printf "[ERROR] ${1}\n" "${@:2}" 2>&1
}
function print_info(){
	if [[ $# -lt 1 ]]; then return; fi
	printf "[INFO] ${1}\n" "${@:2}"
}
function print_debug(){
	if [[ $# -lt 1 ]]; then return; fi
	printf "[DEBUG] ${1}\n" "${@:2}"
}

function print_usage(){
	cat << EOF
Usage: $(basename ${BASH_SOURCE}) [OPTIONS]
Unzip archives found in the current working directory in parallel.
The default number of jobs is 4.

Options:
  -h	Help
  -j	Number of parallel zip jobs
EOF
}

INTEGER_VALUE_REGEX="^[0-9]+$"
PARALLEL_JOBS=4
while getopts ":hj:" ARG; do
	case "${ARG}" in
		h)
			print_usage
			exit 0
			;;
		j)
			if ! [[ "${OPTARG}" =~ ${INTEGER_VALUE_REGEX} ]]; then
				print_error "Argument -j should be valued with an integer"
				print_usage
				exit 1
			fi
			PARALLEL_JOBS="${OPTARG}"
			;;
		?)
			print_error "Unknown option -%s" "${OPTARG}"
			print_usage
			exit 1
			;;
	esac
done
shift $((OPTIND-1))

ZIP_FILE_LIST="$(find -mindepth 1 -maxdepth 1 -name '*.zip' -type f 2>/dev/null)"
ZIP_FILE_COUNT="$(printf "${ZIP_FILE_LIST}" | wc -l)"

if [[ "${ZIP_FILE_COUNT}" == 0 ]]; then
	trace_info "Cannot find zip files"
	exit 0
fi

printf "${ZIP_FILE_LIST}\n"
CONTINUE="false"
while true; do
	read -p "Continue? [y/n] " USER_ANSWER
	case "${USER_ANSWER}" in
		[Yy]* )
			CONTINUE="true"
			break
			;;
		[Nn]* )
			break
			;;
		* )
			printf "Please answer yes or no\n\n" > /dev/stderr
			;;
	esac
done
if ! ${CONTINUE}; then exit 1; fi

find . -mindepth 1 -maxdepth 1 -name '*.zip' -type f -exec bash -c 'printf "unzip \"{}\"\n"' \; | parallel -vt --jobs "${PARALLEL_JOBS}"
