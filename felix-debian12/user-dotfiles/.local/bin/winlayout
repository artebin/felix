#!/usr/bin/env bash

# Code below retrieved at <https://bbs.archlinux.org/viewtopic.php?pid=2086994#p2086994>.

function print_usage(){
	cat << EOF
Usage: ${BASH_SOURCE} COMMAND

Where COMMAND can be:
  help
  save
  restore
EOF
}

function save_windows_positions(){
	PROFILE_NAME="${1}"
	if [[ -z "${PROFILE_NAME}" ]]; then
		printf "!ERROR! PROFILE_NAME should not be empty\n"
		exit 1
	fi
	PROFILE_DIRECTORY="${CONFIG_WINRESTORE_DIRECTORY}/${PROFILE_NAME}"
	if [[ ! -d "${PROFILE_NAME}" ]]; then
		mkdir -p "${PROFILE_DIRECTORY}"
	else
		rm -rf "${PROFILE_DIRECTORY}/*"
	fi
	WMCTRL_FILE="${PROFILE_DIRECTORY}/wmctrl.txt"
	wmctrl -lG >"${WMCTRL_FILE}"
	while read LINE; do
		LINE=$(echo "${LINE}"|tr -s ' ')
		WIN_ID=$(echo "${LINE}"|cut -d ' ' -f1)
		DESK=$(echo "${LINE}"|cut -d ' ' -f2)
		if [[ "${DESK}" -le 0 ]]; then
			continue;
		fi
		xprop -id "${WIN_ID}" >"${PROFILE_DIRECTORY}/xprop.${WIN_ID}"
		wnckprop --xid $((${WIN_ID})) >"${PROFILE_DIRECTORY}/wnckprop.${WIN_ID}"
	done <"${WMCTRL_FILE}"
}

function restore_windows_positions(){
	PROFILE_NAME="${1}"
	if [[ -z "${PROFILE_NAME}" ]]; then
		printf "!ERROR! PROFILE_NAME should not be empty\n"
		exit 1
	fi
	PROFILE_DIRECTORY="${CONFIG_WINRESTORE_DIRECTORY}/${PROFILE_NAME}"
	if [[ ! -d "${PROFILE_DIRECTORY}" ]]; then
		printf "!ERROR! Cannot find PROFILE_DIRECTORY[%s]\n" "${PROFILE_DIRECTORY}"
		exit 1
	fi
	WMCTRL_FILE="${PROFILE_DIRECTORY}/wmctrl.txt"
	if [[ ! -f "${WMCTRL_FILE}" ]]; then
		printf "!ERROR! Cannot find WMCTRL_FILE[%s]\n" "${WMCTRL_FILE}"
		exit 1
	fi
	
	XPROP_NET_WM_OPAQUE_REGION_LINE_REGEX="_NET_WM_OPAQUE_REGION.*= ([[:digit:]]+), ([[:digit:]]+), ([[:digit:]]+), ([[:digit:]]+)"
	WNCKPROP_GEOMETRY_LINE_REGEX="Geometry.*: ([[:digit:]]+), ([[:digit:]]+), ([[:digit:]]+), ([[:digit:]]+)"
	while read LINE; do
		LINE=$(echo "${LINE}"|tr -s ' ')
		WIN_ID=$(echo "${LINE}"|cut -d ' ' -f1)
		DESK=$(echo "${LINE}"|cut -d ' ' -f2)
		if [[ "${DESK}" -le 0 ]]; then
			continue;
		fi
		
		wmctrl -i -r "${WIN_ID}" -t "${DESK}"
		
		XPROP_FILE="${PROFILE_DIRECTORY}/xprop.${WIN_ID}"
		if [[ ! -f "${XPROP_FILE}" ]]; then
			printf "!ERROR! Cannot find XPROP_FILE[%s]\n" "${XPROP_FILE}"
			exit 1
		fi
		XPROP_NET_WM_OPAQUE_REGION_LINE="$(grep -o "_NET_WM_OPAQUE_REGION.*" "${XPROP_FILE}")"
		if [[ "${XPROP_NET_WM_OPAQUE_REGION_LINE}" =~ ${XPROP_NET_WM_OPAQUE_REGION_LINE_REGEX} ]]; then
			WIN_WIDTH="${BASH_REMATCH[3]}"
			WIN_HEIGHT="${BASH_REMATCH[4]}"
			printf "WIN_ID[%s] WIN_WIDTH[%s] WIN_HEIGHT[%s]\n" "${WIN_ID}" "${WIN_WIDTH}" "${WIN_HEIGHT}"
			xdotool windowsize "${WIN_ID}" "${WIN_WIDTH}" "${WIN_HEIGHT}"
		fi
		
		WNCKPROP_FILE="${PROFILE_DIRECTORY}/wnckprop.${WIN_ID}"
		if [[ ! -f "${WNCKPROP_FILE}" ]]; then
			printf "!ERROR! Cannot find WNCKPROP_FILE[%s]\n" "${WNCKPROP_FILE}"
			exit 1
		fi
		WNCKPROP_GEOMETRY_LINE="$(grep -o "Geometry.*" "${WNCKPROP_FILE}")"
		if [[ "${WNCKPROP_GEOMETRY_LINE}" =~ ${WNCKPROP_GEOMETRY_LINE_REGEX} ]]; then
			WIN_POSX="${BASH_REMATCH[1]}"
			WIN_POSY="${BASH_REMATCH[2]}"
			printf "WIN_ID[%s] WIN_POSX[%s] WIN_POSY[%s]\n" "${WIN_ID}" "${WIN_POSX}" "${WIN_POSY}"
			xdotool windowmove "${WIN_ID}" "${WIN_POSX}" "${WIN_POSY}"
		fi
	done <"${WMCTRL_FILE}"
}

CONFIG_WINRESTORE_DIRECTORY="${HOME}/.config/winrestore"
if [[ ! -d "${CONFIG_WINRESTORE_DIRECTORY}" ]]; then
	mkdir -p "${CONFIG_WINRESTORE_DIRECTORY}"
fi

COMMAND="${1}"
case "${COMMAND}" in
	"help")
		print_usage
		exit 0
		;;
	"save")
		if [[ "${#}" -ne 2 ]]; then
			print_usage
			exit 1
		fi
		save_windows_positions "${2}"
		;;
	"restore")
		if [[ "${#}" -ne 2 ]]; then
			print_usage
			exit 1
		fi
		restore_windows_positions "${2}"
		;;
	*)
		print_usage
		exit 1
		;;
esac
