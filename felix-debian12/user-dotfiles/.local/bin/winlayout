#!/usr/bin/env bash

function print_usage(){
	cat << EOF
Usage: ${BASH_SOURCE} COMMAND

Where COMMAND can be:
  help
  save
  load
EOF
}

function winlayout_save(){
	PROFILE_NAME="${1}"
	if [[ -z "${PROFILE_NAME}" ]]; then
		printf "!ERROR! PROFILE_NAME should not be empty\n"
		exit 1
	fi
	PROFILE_DIRECTORY="${WINLAYOUT_CONFIG_DIRECTORY}/${PROFILE_NAME}"
	if [[ ! -d "${PROFILE_NAME}" ]]; then
		mkdir -p "${PROFILE_DIRECTORY}"
	else
		rm -rf "${PROFILE_DIRECTORY}/*"
	fi
	WMCTRL_FILE="${PROFILE_DIRECTORY}/wmctrl.txt"
	wmctrl -lG >"${WMCTRL_FILE}"
	while read LINE; do
		LINE=$(echo "${LINE}"|tr -s ' ')
		WIN_ID=$(echo "${LINE}"|cut -d ' ' -f1)
		DESK=$(echo "${LINE}"|cut -d ' ' -f2)
		if [[ "${DESK}" -le 0 ]]; then
			continue;
		fi
		xprop -id "${WIN_ID}" >"${PROFILE_DIRECTORY}/xprop.${WIN_ID}"
		wnckprop --xid $((${WIN_ID})) >"${PROFILE_DIRECTORY}/wnckprop.${WIN_ID}"
	done <"${WMCTRL_FILE}"
}

function winlayout_load(){
	PROFILE_NAME="${1}"
	if [[ -z "${PROFILE_NAME}" ]]; then
		printf "!ERROR! PROFILE_NAME should not be empty\n"
		exit 1
	fi
	PROFILE_DIRECTORY="${WINLAYOUT_CONFIG_DIRECTORY}/${PROFILE_NAME}"
	if [[ ! -d "${PROFILE_DIRECTORY}" ]]; then
		printf "!ERROR! Cannot find PROFILE_DIRECTORY[%s]\n" "${PROFILE_DIRECTORY}"
		exit 1
	fi
	WMCTRL_FILE="${PROFILE_DIRECTORY}/wmctrl.txt"
	if [[ ! -f "${WMCTRL_FILE}" ]]; then
		printf "!ERROR! Cannot find WMCTRL_FILE[%s]\n" "${WMCTRL_FILE}"
		exit 1
	fi
	
	WMCTRL_LINE_REGEX="(0x[0-9a-z]+) (-?[0-9]+) ([0-9]+) ([0-9]+) ([0-9]+) ([0-9]+) (.*)"
	XPROP_NET_WM_OPAQUE_REGION_LINE_REGEX="_NET_WM_OPAQUE_REGION.*= ([[:digit:]]+), ([[:digit:]]+), ([[:digit:]]+), ([[:digit:]]+)"
	WNCKPROP_GEOMETRY_LINE_REGEX="Geometry.*: ([[:digit:]]+), ([[:digit:]]+), ([[:digit:]]+), ([[:digit:]]+)"
	while read LINE; do
		LINE=$(echo "${LINE}"|tr -s ' ')
		if [[ "${LINE}" =~ ${WMCTRL_LINE_REGEX} ]]; then
			WIN_ID="${BASH_REMATCH[1]}"
			WIN_DESK="${BASH_REMATCH[2]}"
			WIN_POSX="${BASH_REMATCH[3]}"
			WIN_POSY="${BASH_REMATCH[4]}"
			WIN_WIDTH="${BASH_REMATCH[5]}"
			WIN_HEIGHT="${BASH_REMATCH[6]}"
			WIN_TITLE="${BASH_REMATCH[7]}"
			
			if [[ "${WIN_DESK}" -le 0 ]]; then
				continue;
			fi
			
			printf "WIN_ID[%s] WIN_DESK[%s] WIN_POSX[%s] WIN_POSY[%s] WIN_WIDTH[%s] WIN_HEIGHT[%s] WIN_TITLE[%s]\n" "${WIN_ID}" "${WIN_DESK}" "${WIN_POSX}" "${WIN_POSY}" "${WIN_WIDTH}" "${WIN_HEIGHT}" "${WIN_TITLE}"
			
			# Restore virtual desktop ID for window
			wmctrl -i -r "${WIN_ID}" -t "${WIN_DESK}"
			
			# Restore window size from `wmctrl`
			xdotool windowsize "${WIN_ID}" "${WIN_WIDTH}" "${WIN_HEIGHT}"
			
			# Restore window size from `xprop`
			#XPROP_FILE="${PROFILE_DIRECTORY}/xprop.${WIN_ID}"
			#if [[ ! -f "${XPROP_FILE}" ]]; then
				#printf "!ERROR! Cannot find XPROP_FILE[%s]\n" "${XPROP_FILE}"
				#exit 1
			#fi
			#XPROP_NET_WM_OPAQUE_REGION_LINE="$(grep -o "_NET_WM_OPAQUE_REGION.*" "${XPROP_FILE}")"
			#if [[ "${XPROP_NET_WM_OPAQUE_REGION_LINE}" =~ ${XPROP_NET_WM_OPAQUE_REGION_LINE_REGEX} ]]; then
				#WIN_WIDTH="${BASH_REMATCH[3]}"
				#WIN_HEIGHT="${BASH_REMATCH[4]}"
				#printf "WIN_ID[%s] WIN_WIDTH[%s] WIN_HEIGHT[%s]\n" "${WIN_ID}" "${WIN_WIDTH}" "${WIN_HEIGHT}"
				#xdotool windowsize "${WIN_ID}" "${WIN_WIDTH}" "${WIN_HEIGHT}"
			#fi
			
			# Restore window location from `wnckprop`
			# `wmctrl` returns the location of the window content i.e. it ignores title bar and borders
			WNCKPROP_FILE="${PROFILE_DIRECTORY}/wnckprop.${WIN_ID}"
			if [[ ! -f "${WNCKPROP_FILE}" ]]; then
				printf "!ERROR! Cannot find WNCKPROP_FILE[%s]\n" "${WNCKPROP_FILE}"
				exit 1
			fi
			WNCKPROP_GEOMETRY_LINE="$(grep -o "Geometry.*" "${WNCKPROP_FILE}")"
			if [[ "${WNCKPROP_GEOMETRY_LINE}" =~ ${WNCKPROP_GEOMETRY_LINE_REGEX} ]]; then
				WIN_POSX="${BASH_REMATCH[1]}"
				WIN_POSY="${BASH_REMATCH[2]}"
				printf "WIN_ID[%s] WIN_POSX[%s] WIN_POSY[%s]\n" "${WIN_ID}" "${WIN_POSX}" "${WIN_POSY}"
				xdotool windowmove "${WIN_ID}" "${WIN_POSX}" "${WIN_POSY}"
			fi
			
			printf "\n"
		fi
	done <"${WMCTRL_FILE}"
}

WINLAYOUT_CONFIG_DIRECTORY="${HOME}/.config/winlayout"
if [[ ! -d "${WINLAYOUT_CONFIG_DIRECTORY}" ]]; then
	mkdir -p "${WINLAYOUT_CONFIG_DIRECTORY}"
fi

COMMAND="${1}"
case "${COMMAND}" in
	"help")
		print_usage
		exit 0
		;;
	"save")
		if [[ "${#}" -ne 2 ]]; then
			print_usage
			exit 1
		fi
		winlayout_save "${2}"
		;;
	"load")
		if [[ "${#}" -ne 2 ]]; then
			print_usage
			exit 1
		fi
		winlayout_load "${2}"
		;;
	*)
		print_usage
		exit 1
		;;
esac
