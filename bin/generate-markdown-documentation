#!/usr/bin/env bash

source "$(dirname ${BASH_SOURCE})/common.sh"
source "$(dirname ${BASH_SOURCE})/common-felix.sh"

function cleanup(){
	if [[ -f recipes.list ]]; then
		rm -f recipes.list
	fi
}
trap cleanup 1 2 3 6

function print_usage(){
	printf "Usage: %s <RECIPES_PARENT_DIRECTORY> <OUTPUT_DIRECTORY>\n" "$(basename "${BASH_SOURCE}")"
}

function collect_felix_recipes(){
	if [[ "${#}" -ne 2 ]]; then
		printf "!ERROR! ${FUNCNAME[0]}() expects RECIPES_PARENT_DIRECTORY and RECIPE_DIRECTORY_ARRAY_NAME in arguments\n"
		exit 1
	fi
	
	RECIPES_PARENT_DIRECTORY="${1}"
	RECIPE_DIRECTORY_ARRAY_NAME="${2}"
	
	if [[ ! -d "${RECIPES_PARENT_DIRECTORY}" ]]; then
		printf "!ERROR! Cannot find RECIPES_PARENT_DIRECTORY[%s]\n" "${RECIPES_PARENT_DIRECTORY}"
		exit 1
	fi
	
	rm -f recipes.list
	find "${RECIPES_PARENT_DIRECTORY}" -type f -name FELIX_RECIPE -exec readlink -f {} > recipes.list \;
	
	declare -n RECIPE_DIRECTORY_ARRAY="${RECIPE_DIRECTORY_ARRAY_NAME}"
	
	if [[ -f recipes.list ]]; then
		while IFS="" read -r LINE; do
			FELIX_RECIPE_FILE="${LINE}"
			RECIPE_DIRECTORY_ARRAY+=( "$(dirname "${FELIX_RECIPE_FILE}")" )
		done < recipes.list
	fi
	printf "Found %d recipe(s)\n" "${#RECIPE_DIRECTORY_ARRAY[@]}"
}

declare -a ARRAY
collect_felix_recipes "${1}" "ARRAY"

for RECIPE_DIRECTORY in "${ARRAY[@]}"; do
	RECIPE_DIRECTORY_NAME="$(basename ${RECIPE_DIRECTORY})"
	RECIPE_SCRIPT_FILE=$(retrieve_recipe_script_file "${RECIPE_DIRECTORY_NAME}")
	bash -c "source ${RECIPE_DIRECTORY}/${RECIPE_SCRIPT_FILE};print_markdown_documentation"
done
